// Game state
const gameState = {
    money: 1000,
    day: 1,
    reputation: 10,
    level: 1,
    customers: 0,
    totalSales: 0,
    inventory: {
        milk: { name: "S·ªØa", emoji: "ü•õ", price: 5, cost: 2, stock: 10, demand: 0.8 },
        bread: { name: "B√°nh m√¨", emoji: "üçû", price: 8, cost: 3, stock: 8, demand: 0.7 },
        eggs: { name: "Tr·ª©ng", emoji: "ü•ö", price: 12, cost: 5, stock: 6, demand: 0.6 },
        meat: { name: "Th·ªãt", emoji: "ü•©", price: 25, cost: 12, stock: 4, demand: 0.5 },
        vegetables: { name: "Rau", emoji: "ü•¶", price: 15, cost: 7, stock: 5, demand: 0.6 },
        fruits: { name: "Hoa qu·∫£", emoji: "üçé", price: 20, cost: 9, stock: 5, demand: 0.5 }
    },
    upgrades: {
        shelf: { 
            level: 1, 
            cost: 200, 
            effect: "+5 s·ª©c ch·ª©a m·ªói l·∫ßn nh·∫≠p h√†ng",
            description: "üì¶ K·ªá h√†ng m·ªü r·ªông",
            maxLevel: 5
        },
        advertising: { 
            level: 1, 
            cost: 300, 
            effect: "+20% s·ªë kh√°ch h√†ng m·ªói ng√†y",
            description: "üì¢ Chi·∫øn d·ªãch qu·∫£ng c√°o",
            maxLevel: 5
        },
        quality: { 
            level: 1, 
            cost: 400, 
            effect: "+15% gi√° b√°n t·∫•t c·∫£ s·∫£n ph·∫©m",
            description: "‚≠ê N√¢ng cao ch·∫•t l∆∞·ª£ng",
            maxLevel: 3
        }
    }
};

// Kh·ªüi t·∫°o game
function initGame() {
    console.log('üéÆ Initializing Supermarket Tycoon...');
    createShelves();
    updateUI();
    addLog("üõí Game ƒë√£ kh·ªüi ƒë·ªông! B·∫Øt ƒë·∫ßu kinh doanh n√†o!", "success");
}

// T·∫°o k·ªá h√†ng
function createShelves() {
    const supermarket = document.getElementById('supermarket');
    supermarket.innerHTML = '';
    
    Object.values(gameState.inventory).forEach((product) => {
        const shelf = document.createElement('div');
        shelf.className = 'shelf';
        shelf.innerHTML = `
            <div class="product-icon">${product.emoji}</div>
            <div class="product-info">
                <div class="product-name">${product.name}</div>
                <div>üí∞ Gi√° b√°n: $${product.price}</div>
                <div class="product-stock">üì¶ T·ªìn kho: ${product.stock}</div>
                <div>üíµ L·ª£i nhu·∫≠n: $${product.price - product.cost}</div>
            </div>
        `;
        supermarket.appendChild(shelf);
    });
}

// C·∫≠p nh·∫≠t UI
function updateUI() {
    document.getElementById('day').textContent = gameState.day;
    document.getElementById('level').textContent = gameState.level;
    document.getElementById('reputation').textContent = gameState.reputation;
    document.getElementById('money').textContent = gameState.money;
    document.getElementById('customers').textContent = gameState.customers;
    document.getElementById('totalSales').textContent = gameState.totalSales;
    
    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho tr√™n k·ªá
    const shelves = document.querySelectorAll('.shelf');
    Object.values(gameState.inventory).forEach((product, index) => {
        if (shelves[index]) {
            const stockElement = shelves[index].querySelector('.product-stock');
            if (stockElement) {
                stockElement.textContent = `üì¶ T·ªìn kho: ${product.stock}`;
            }
        }
    });

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·∫Øng/thua
    checkGameConditions();
}

// X·ª≠ l√Ω nh·∫≠p h√†ng
function handleRestock() {
    const modal = document.getElementById('restockModal');
    const optionsContainer = document.getElementById('restockOptions');
    optionsContainer.innerHTML = '';
    
    Object.entries(gameState.inventory).forEach(([key, product]) => {
        const restockOption = document.createElement('div');
        restockOption.className = 'restock-option';
        restockOption.innerHTML = `
            <div style="font-size: 2em; margin-bottom: 10px;">${product.emoji}</div>
            <div style="font-weight: bold; margin-bottom: 5px;">${product.name}</div>
            <div>Gi√° nh·∫≠p: $${product.cost}</div>
            <div>T·ªìn kho: ${product.stock}</div>
            <div style="margin-top: 10px; color: #4CAF50;">
                Nh·∫≠p 10 c√°i: $${product.cost * 10}
            </div>
        `;
        restockOption.onclick = () => restockProduct(key, 10);
        optionsContainer.appendChild(restockOption);
    });
    
    modal.style.display = 'flex';
}

function restockProduct(productKey, quantity) {
    const product = gameState.inventory[productKey];
    const totalCost = quantity * product.cost;
    
    if (totalCost > gameState.money) {
        addLog(`‚ùå Kh√¥ng ƒë·ªß ti·ªÅn nh·∫≠p ${quantity} ${product.name}! C·∫ßn $${totalCost}`, "error");
        return;
    }
    
    gameState.money -= totalCost;
    product.stock += quantity;
    
    addLog(`‚úÖ ƒê√£ nh·∫≠p ${quantity} ${product.name} - T·ªïng chi: $${totalCost}`, "success");
    updateUI();
    closeModal('restockModal');
}

// X·ª≠ l√Ω kinh doanh
async function handleBusiness() {
    addLog("üîÑ ƒêang kinh doanh...", "warning");
    
    let dailySales = 0;
    let dailyCustomers = 0;
    
    // T√≠nh s·ªë kh√°ch h√†ng d·ª±a tr√™n danh ti·∫øng v√† n√¢ng c·∫•p
    const baseCustomers = 5 + Math.floor(gameState.reputation / 2);
    const advertisingBonus = Math.floor(baseCustomers * (gameState.upgrades.advertising.level - 1) * 0.2);
    const customerCount = baseCustomers + advertisingBonus + Math.floor(Math.random() * 6);
    
    for (let i = 0; i < customerCount; i++) {
        await sleep(400);
        const availableItems = Object.values(gameState.inventory).filter(item => item.stock > 0);
        if (availableItems.length === 0) {
            addLog("‚ùå ƒê√£ h·∫øt h√†ng! Kh√¥ng th·ªÉ b√°n ti·∫øp.", "error");
            break;
        }
        
        const randomItem = availableItems[Math.floor(Math.random() * availableItems.length)];
        if (Math.random() < randomItem.demand) {
            randomItem.stock--;
            const saleAmount = randomItem.price;
            dailySales += saleAmount;
            dailyCustomers++;
            addLog(`üí∞ Kh√°ch ${i+1} mua ${randomItem.emoji} ${randomItem.name} - $${saleAmount}`);
        }
    }
    
    gameState.money += dailySales;
    gameState.totalSales += dailySales;
    gameState.customers = dailyCustomers;
    gameState.day++;
    
    // TƒÉng danh ti·∫øng d·ª±a tr√™n doanh thu
    if (dailySales > 0) {
        const repGain = Math.max(1, Math.floor(dailySales / 50));
        gameState.reputation += repGain;
    }
    
    // Ki·ªÉm tra level up
    if (gameState.totalSales > gameState.level * 1000) {
        gameState.level++;
        addLog(`üéâ LEVEL UP! Si√™u th·ªã ƒë·∫°t c·∫•p ${gameState.level}! Th∆∞·ªüng $200!`, "success");
        gameState.money += 200;
    }
    
    // S·ª± ki·ªán ng·∫´u nhi√™n
    handleRandomEvents();
    
    addLog(`üìä K·∫øt qu·∫£ ng√†y ${gameState.day - 1}: $${dailySales} t·ª´ ${dailyCustomers} kh√°ch h√†ng`, "success");
    updateUI();
}

// S·ª± ki·ªán ng·∫´u nhi√™n
function handleRandomEvents() {
    const events = [
        {
            name: "üì∞ Qu·∫£ng c√°o viral tr√™n m·∫°ng x√£ h·ªôi!",
            probability: 0.2,
            effect: () => {
                gameState.reputation += 5;
                return "Danh ti·∫øng +5!";
            }
        },
        {
            name: "üéØ Khuy·∫øn m√£i th√†nh c√¥ng ngo√†i d·ª± ki·∫øn!",
            probability: 0.3,
            effect: () => {
                const bonus = 50 + Math.floor(Math.random() * 100);
                gameState.money += bonus;
                return `Thu th√™m $${bonus} t·ª´ khuy·∫øn m√£i!`;
            }
        },
        {
            name: "üö® H√†ng h√≥a h∆∞ h·ªèng do b·∫£o qu·∫£n!",
            probability: 0.15,
            effect: () => {
                const randomItem = Object.values(gameState.inventory)[Math.floor(Math.random() * 6)];
                const lost = Math.max(1, Math.floor(randomItem.stock * 0.1));
                randomItem.stock -= lost;
                return `M·∫•t ${lost} ${randomItem.name} do h∆∞ h·ªèng!`;
            }
        },
        {
            name: "üåü Kh√°ch h√†ng trung th√†nh t·∫∑ng qu√†!",
            probability: 0.1,
            effect: () => {
                gameState.money += 100;
                gameState.reputation += 3;
                return "Nh·∫≠n qu√† $100 v√† danh ti·∫øng +3 t·ª´ kh√°ch h√†ng trung th√†nh!";
            }
        }
    ];

    events.forEach(event => {
        if (Math.random() < event.probability) {
            const result = event.effect();
            addLog(`üì¢ ${event.name} - ${result}`, "warning");
        }
    });
}

// Hi·ªÉn th·ªã th·ªëng k√™
function showStatistics() {
    const modal = document.getElementById('statsModal');
    const content = document.getElementById('statsContent');
    
    let inventoryValue = 0;
    let totalProfit = 0;
    
    Object.values(gameState.inventory).forEach(item => {
        inventoryValue += item.stock * item.cost;
        totalProfit += item.stock * (item.price - item.cost);
    });
    
    const totalCustomers = Math.floor(gameState.totalSales / 15);
    const avgDailySales = Math.floor(gameState.totalSales / (gameState.day - 1) || 0);
    const moneyToWin = Math.max(0, 10000 - gameState.money);
    
    content.innerHTML = `
        <div style="display: grid; gap: 15px; font-size: 1.1em;">
            <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 10px;">
                <div>üí∞ <strong>T·ªïng doanh thu:</strong> $${gameState.totalSales}</div>
                <div>üìÖ <strong>S·ªë ng√†y kinh doanh:</strong> ${gameState.day - 1}</div>
                <div>üìà <strong>Doanh thu trung b√¨nh/ng√†y:</strong> $${avgDailySales}</div>
            </div>
            
            <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 10px;">
                <div>üè™ <strong>C·∫•p ƒë·ªô si√™u th·ªã:</strong> ${gameState.level}</div>
                <div>üòä <strong>ƒêi·ªÉm danh ti·∫øng:</strong> ${gameState.reputation}</div>
                <div>üë• <strong>T·ªïng kh√°ch h√†ng ∆∞·ªõc t√≠nh:</strong> ${totalCustomers}</div>
            </div>
            
            <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 10px;">
                <div>üì¶ <strong>Gi√° tr·ªã kho h√†ng:</strong> $${inventoryValue}</div>
                <div>üíµ <strong>L·ª£i nhu·∫≠n ti·ªÅm nƒÉng:</strong> $${totalProfit}</div>
                <div>üéØ <strong>C√≤n l·∫°i ƒë·ªÉ th·∫Øng:</strong> $${moneyToWin}</div>
            </div>
        </div>
    `;
    
    modal.style.display = 'flex';
}

// Hi·ªÉn th·ªã n√¢ng c·∫•p
function showUpgrades() {
    const modal = document.getElementById('upgradesModal');
    const content = document.getElementById('upgradesContent');
    content.innerHTML = '';
    
    Object.entries(gameState.upgrades).forEach(([key, upgrade]) => {
        const upgradeElement = document.createElement('div');
        upgradeElement.style.cssText = `
            background: rgba(255,255,255,0.1);
            padding: 20px;
            margin-bottom: 15px;
            border-radius: 12px;
            border-left: 4px solid #3498db;
        `;
        
        const canAfford = gameState.money >= upgrade.cost;
        const isMaxLevel = upgrade.level >= upgrade.maxLevel;
        
        upgradeElement.innerHTML = `
            <h3 style="margin-bottom: 10px; color: #3498db;">${upgrade.description}</h3>
            <p style="margin-bottom: 5px;">${upgrade.effect}</p>
            <p style="margin-bottom: 10px;">C·∫•p hi·ªán t·∫°i: ${upgrade.level}/${upgrade.maxLevel}</p>
            <p style="margin-bottom: 15px; font-weight: bold; color: ${canAfford ? '#4CAF50' : '#e74c3c'}">
                Gi√° n√¢ng c·∫•p: $${upgrade.cost}
            </p>
            <button 
                onclick="buyUpgrade('${key}')" 
                ${!canAfford || isMaxLevel ? 'disabled' : ''}
                style="width: 100%; padding: 12px; background: ${isMaxLevel ? '#95a5a6' : canAfford ? '#2ecc71' : '#e74c3c'}; color: white; border: none; border-radius: 8px; cursor: ${isMaxLevel ? 'default' : canAfford ? 'pointer' : 'not-allowed'};"
            >
                ${isMaxLevel ? 'üéâ ƒê√£ ƒë·∫°t c·∫•p t·ªëi ƒëa!' : canAfford ? 'üöÄ N√¢ng c·∫•p ngay!' : '‚ùå Kh√¥ng ƒë·ªß ti·ªÅn'}
            </button>
        `;
        
        content.appendChild(upgradeElement);
    });
    
    modal.style.display = 'flex';
}

// Mua n√¢ng c·∫•p
function buyUpgrade(upgradeKey) {
    const upgrade = gameState.upgrades[upgradeKey];
    
    if (gameState.money < upgrade.cost) {
        addLog(`‚ùå Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ n√¢ng c·∫•p! C·∫ßn $${upgrade.cost}`, "error");
        return;
    }
    
    if (upgrade.level >= upgrade.maxLevel) {
        addLog(`‚ùå ${upgrade.description} ƒë√£ ƒë·∫°t c·∫•p t·ªëi ƒëa!`, "error");
        return;
    }
    
    gameState.money -= upgrade.cost;
    upgrade.level++;
    upgrade.cost = Math.floor(upgrade.cost * 1.8); // TƒÉng gi√° cho l·∫ßn n√¢ng c·∫•p ti·∫øp theo
    
    // √Åp d·ª•ng hi·ªáu ·ª©ng n√¢ng c·∫•p
    applyUpgradeEffect(upgradeKey);
    
    addLog(`‚úÖ ƒê√£ n√¢ng c·∫•p ${upgrade.description} l√™n c·∫•p ${upgrade.level}`, "success");
    updateUI();
    closeModal('upgradesModal');
}

// √Åp d·ª•ng hi·ªáu ·ª©ng n√¢ng c·∫•p
function applyUpgradeEffect(upgradeKey) {
    switch (upgradeKey) {
        case 'quality':
            // TƒÉng gi√° b√°n cho t·∫•t c·∫£ s·∫£n ph·∫©m
            Object.values(gameState.inventory).forEach(item => {
                item.price = Math.floor(item.price * 1.15);
            });
            addLog("‚≠ê Ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m ƒë∆∞·ª£c c·∫£i thi·ªán! Gi√° b√°n tƒÉng 15%", "success");
            break;
        case 'shelf':
            addLog("üì¶ K·ªá h√†ng ƒë∆∞·ª£c m·ªü r·ªông! S·ª©c ch·ª©a tƒÉng l√™n", "success");
            break;
        case 'advertising':
            addLog("üì¢ Qu·∫£ng c√°o hi·ªáu qu·∫£! S·∫Ω c√≥ nhi·ªÅu kh√°ch h√†ng h∆°n", "success");
            break;
    }
}

// Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
function showInstructions() {
    const modal = document.getElementById('instructionsModal');
    const content = document.getElementById('instructionsContent');
    
    content.innerHTML = `
        <div style="line-height: 1.6;">
            <h3 style="color: #3498db; margin-bottom: 15px;">üéØ M·ª•c ti√™u tr√≤ ch∆°i</h3>
            <p>Ki·∫øm <strong>$10,000</strong> ƒë·ªÉ tr·ªü th√†nh tri·ªáu ph√∫ si√™u th·ªã!</p>
            
            <h3 style="color: #3498db; margin: 20px 0 10px;">üì¶ C√°ch ch∆°i</h3>
            <ul style="margin-left: 20px; margin-bottom: 20px;">
                <li><strong>Nh·∫≠p h√†ng:</strong> Mua h√†ng v·ªõi gi√° g·ªëc, b√°n v·ªõi gi√° l·ªùi</li>
                <li><strong>Kinh doanh:</strong> M·ªói ng√†y kh√°ch h√†ng s·∫Ω t·ª± ƒë·ªông ƒë·∫øn mua h√†ng</li>
                <li><strong>N√¢ng c·∫•p:</strong> C·∫£i thi·ªán si√™u th·ªã ƒë·ªÉ thu h√∫t nhi·ªÅu kh√°ch h∆°n</li>
                <li><strong>Qu·∫£n l√Ω:</strong> Theo d√µi kho h√†ng v√† t√†i ch√≠nh</li>
            </ul>
            
            <h3 style="color: #3498db; margin: 20px 0 10px;">üí° M·∫πo chi·∫øn th·∫Øng</h3>
            <ul style="margin-left: 20px;">
                <li>Lu√¥n gi·ªØ kho h√†ng ƒëa d·∫°ng</li>
                <li>N√¢ng c·∫•p qu·∫£ng c√°o ƒë·ªÉ tƒÉng s·ªë kh√°ch h√†ng</li>
                <li>N√¢ng c·∫•p ch·∫•t l∆∞·ª£ng ƒë·ªÉ tƒÉng l·ª£i nhu·∫≠n</li>
                <li>Theo d√µi danh ti·∫øng - c√†ng cao c√†ng nhi·ªÅu kh√°ch</li>
            </ul>
            
            <div style="background: rgba(52, 152, 219, 0.2); padding: 15px; border-radius: 8px; margin-top: 20px;">
                <strong>‚ö° T√≠nh nƒÉng ƒë·∫∑c bi·ªát:</strong>
                <br>‚Ä¢ S·ª± ki·ªán ng·∫´u nhi√™n m·ªói ng√†y
                <br>‚Ä¢ H·ªá th·ªëng n√¢ng c·∫•p ƒëa d·∫°ng
                <br>‚Ä¢ T·ª± ƒë·ªông l∆∞u game
                <br>‚Ä¢ ƒê·ªì h·ªça ƒë·∫πp m·∫Øt v√† hi·ªáu ·ª©ng
            </div>
        </div>
    `;
    
    modal.style.display = 'flex';
}

// Utility functions
function addLog(message, type = "normal") {
    const log = document.getElementById('log');
    const entry = document.createElement('div');
    entry.className = `log-entry ${type}`;
    entry.textContent = message;
    log.appendChild(entry);
    log.scrollTop = log.scrollHeight;
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function checkGameConditions() {
    if (gameState.money < 0) {
        addLog("üí∏ B·∫†N ƒê√É PH√Å S·∫¢N! GAME OVER! L√†m l·∫°i t·ª´ ƒë·∫ßu n√†o!", "error");
        disableGame();
    } else if (gameState.money >= 10000) {
        addLog("üèÜ CH√öC M·ª™NG! B·∫†N ƒê√É TR·ªû TH√ÄNH TRI·ªÜU PH√ö SI√äU TH·ªä! üéâ", "success");
        disableGame();
    }
}

function disableGame() {
    const buttons = document.querySelectorAll('button:not(.close-modal)');
    buttons.forEach(button => {
        button.disabled = true;
        button.style.opacity = '0.6';
        button.style.cursor = 'not-allowed';
    });
}

function saveGame() {
    try {
        localStorage.setItem('supermarketSave', JSON.stringify(gameState));
        addLog("üíæ Game ƒë√£ ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông!", "success");
    } catch (error) {
        addLog("‚ùå L·ªói khi l∆∞u game: " + error.message, "error");
    }
}

function loadGame() {
    try {
        const saved = localStorage.getItem('supermarketSave');
        if (saved) {
            const savedState = JSON.parse(saved);
            Object.assign(gameState, savedState);
            updateUI();
            addLog("üìÇ ƒê√£ t·∫£i game ƒë√£ l∆∞u! Ti·∫øp t·ª•c kinh doanh n√†o!", "success");
        }
    } catch (error) {
        console.log('No saved game found or error loading:', error);
    }
}

// Auto-save m·ªói 30 gi√¢y
setInterval(saveGame, 30000);

// Kh·ªüi ch·∫°y game khi trang load
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ DOM loaded, initializing game...');
    initGame();
    loadGame();
});

// X·ª≠ l√Ω l·ªói to√†n c·ª•c
window.addEventListener('error', function(e) {
    console.error('Global error:', e.error);
    addLog(`‚ùå L·ªói: ${e.error.message}`, "error");
});
